var search_data = {
    'index': {
        'searchIndex': ["xpdf","xpdf\\exception","xpdf\\exception\\binarynotfoundexception","xpdf\\exception\\exceptioninterface","xpdf\\exception\\invalidargumentexception","xpdf\\exception\\logicexception","xpdf\\exception\\runtimeexception","xpdf\\pdftotext","xpdf\\xpdfserviceprovider","xpdf\\pdftotext::__construct","xpdf\\pdftotext::__destruct","xpdf\\pdftotext::setpagequantity","xpdf\\pdftotext::open","xpdf\\pdftotext::close","xpdf\\pdftotext::setouputencoding","xpdf\\pdftotext::getouputencoding","xpdf\\pdftotext::gettext","xpdf\\pdftotext::load","xpdf\\xpdfserviceprovider::register","xpdf\\xpdfserviceprovider::boot"],
        'info': [["XPDF","","XPDF.html","","",3],["XPDF\\Exception","","XPDF\/Exception.html","","",3],["BinaryNotFoundException","XPDF\\Exception","XPDF\/Exception\/BinaryNotFoundException.html"," < Exception","XPDF Binary Not Found Exception",1],["ExceptionInterface","XPDF\\Exception","XPDF\/Exception\/ExceptionInterface.html","","XPDF Exception Interface",1],["InvalidArgumentException","XPDF\\Exception","XPDF\/Exception\/InvalidArgumentException.html"," < InvalidArgumentException","XPDF Invalid File Argument Exception",1],["LogicException","XPDF\\Exception","XPDF\/Exception\/LogicException.html"," < LogicException","XPDF Logic Exception",1],["RuntimeException","XPDF\\Exception","XPDF\/Exception\/RuntimeException.html"," < RuntimeException","XPDF Runtime Exception",1],["PdfToText","XPDF","XPDF\/PdfToText.html","","The PdfToText object.",1],["XPDFServiceProvider","XPDF","XPDF\/XPDFServiceProvider.html","","",1],["PdfToText::__construct","XPDF\\PdfToText","XPDF\/PdfToText.html#method___construct","(string $binary, <abbr title=\"Monolog\\Logger\">Logger<\/abbr> $logger)","Constructor",2],["PdfToText::__destruct","XPDF\\PdfToText","XPDF\/PdfToText.html#method___destruct","()","Destructor",2],["PdfToText::setPageQuantity","XPDF\\PdfToText","XPDF\/PdfToText.html#method_setPageQuantity","(integer $pages)","Set the default number of page to extract When extracting",2],["PdfToText::open","XPDF\\PdfToText","XPDF\/PdfToText.html#method_open","(string $pathfile)","Opens a PDF file in order to extract text",2],["PdfToText::close","XPDF\\PdfToText","XPDF\/PdfToText.html#method_close","()","Close the current open file",2],["PdfToText::setOuputEncoding","XPDF\\PdfToText","XPDF\/PdfToText.html#method_setOuputEncoding","(string $charset)","Set the output encoding.",2],["PdfToText::getOuputEncoding","XPDF\\PdfToText","XPDF\/PdfToText.html#method_getOuputEncoding","()","Get the ouput encoding, default is UTF-8",2],["PdfToText::getText","XPDF\\PdfToText","XPDF\/PdfToText.html#method_getText","(integer $page_start = null, integer $page_end = null)","Extract the text of the current open PDF file, if not",2],["PdfToText::load","XPDF\\PdfToText","XPDF\/PdfToText.html#method_load","(<abbr title=\"Monolog\\Logger\">Logger<\/abbr> $logger)","Look for pdftotext binary and return a new XPDF object",2],["XPDFServiceProvider::register","XPDF\\XPDFServiceProvider","XPDF\/XPDFServiceProvider.html#method_register","(<abbr title=\"Silex\\Application\">Application<\/abbr> $app)","",2],["XPDFServiceProvider::boot","XPDF\\XPDFServiceProvider","XPDF\/XPDFServiceProvider.html#method_boot","(<abbr title=\"Silex\\Application\">Application<\/abbr> $app)","",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']